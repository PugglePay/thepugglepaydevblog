<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[PugglePay]]></title>
  <link href="http://devblog.pugglepay.com/atom.xml" rel="self"/>
  <link href="http://devblog.pugglepay.com/"/>
  <updated>2015-09-04T20:40:35+02:00</updated>
  <id>http://devblog.pugglepay.com/</id>
  <author>
    <name><![CDATA[dev]]></name>
    <email><![CDATA[dev@pugglepay.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ClojureScript: From Zero to Production (Part 2) - Integration Testing]]></title>
    <link href="http://devblog.pugglepay.com/blog/2015/09/04/clojurescript-from-zero-to-production-part-2-integration-testing/"/>
    <updated>2015-09-04T14:09:00+02:00</updated>
    <id>http://devblog.pugglepay.com/blog/2015/09/04/clojurescript-from-zero-to-production-part-2-integration-testing</id>
    <content type="html"><![CDATA[<p>If you are building a single page ClojureScript app, you might be
wondering how to write integration specs for it. By integration specs,
I mean tests that are run in the browser against a build that is as
close to the production app as possible.</p>

<p>In this post, I&#8217;ll show you our setup to get autorunning integration
tests using <code>leiningen</code>, <code>clj-webdriver</code> and <code>speclj</code>.</p>

<!-- more -->


<h2>Goal</h2>

<p>The goal is to get the integration tests to be run every time we save
a file. Getting to run individual tests from the REPL was not a goal
here, because we did not want to force the developers to have any
particular integration with their editors to get a good development
experience.</p>

<h2>Dependencies</h2>

<p>We need to run the tests in a browser that is &#8220;driveable&#8221; by
WebDriver. We chose <a href="https://github.com/ariya/phantomjs">phantomjs</a>
because it&#8217;s easy to install and fast enough.</p>

<p>You can install it with <code>apt-get install phantomjs</code>, <code>brew install
phantomjs</code>, or your favourite package manager.</p>

<h2>Setting up your project.clj</h2>

<p>You&#8217;ll need a new build target in your <code>project.clj</code>.</p>

<p>Note: this assumes you&#8217;re using leiningen. If you&#8217;re using boot, there
might be a better way to do all this.</p>

<p>Before adding integration tests, your <code>project.clj</code> should look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">my-project</span> <span class="s">&quot;0.1.0-SNAPSHOT&quot;</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="s">&quot;FIXME: write this!&quot;</span>
</span><span class='line'>  <span class="ss">:url</span> <span class="s">&quot;http://example.com/FIXME&quot;</span>
</span><span class='line'>  <span class="ss">:license</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Eclipse Public License&quot;</span>
</span><span class='line'>            <span class="ss">:url</span> <span class="s">&quot;http://www.eclipse.org/legal/epl-v10.html&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.7.0&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">org.clojure/clojurescript</span> <span class="s">&quot;1.7.48&quot;</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">lein-cljsbuild</span> <span class="s">&quot;1.0.6&quot;</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;src&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:resource-paths</span> <span class="p">[</span><span class="s">&quot;resources&quot;</span> <span class="s">&quot;resources/public&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:cljsbuild</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:builds</span>
</span><span class='line'>   <span class="p">{</span><span class="ss">:main</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;src&quot;</span><span class="p">]</span>
</span><span class='line'>           <span class="ss">:compiler</span> <span class="p">{</span><span class="ss">:output-to</span> <span class="s">&quot;resources/public/out/my_project.js&quot;</span>
</span><span class='line'>                      <span class="ss">:optimizations</span> <span class="ss">:advanced</span>
</span><span class='line'>                      <span class="ss">:main</span> <span class="nv">my-project.core</span>
</span><span class='line'>                      <span class="ss">:pretty-print</span> <span class="nv">false</span><span class="p">}}}}</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">:profiles</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:dev</span> <span class="p">{</span><span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">figwheel</span> <span class="s">&quot;0.3.8&quot;</span><span class="p">]</span>
</span><span class='line'>                        <span class="p">[</span><span class="nv">org.clojure/tools.nrepl</span> <span class="s">&quot;0.2.10&quot;</span><span class="p">]]</span>
</span><span class='line'>         <span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">lein-figwheel</span> <span class="s">&quot;0.3.8&quot;</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>         <span class="ss">:cljsbuild</span>
</span><span class='line'>         <span class="p">{</span><span class="ss">:builds</span>
</span><span class='line'>          <span class="p">{</span><span class="ss">:main</span> <span class="p">{</span><span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;src&quot;</span><span class="p">]</span>
</span><span class='line'>                  <span class="ss">:figwheel</span> <span class="p">{</span><span class="ss">:on-jsload</span> <span class="s">&quot;my-project.core/on-js-reload&quot;</span><span class="p">}</span>
</span><span class='line'>                  <span class="ss">:compiler</span> <span class="p">{</span><span class="ss">:main</span> <span class="nv">my-project.core</span>
</span><span class='line'>                             <span class="ss">:optimization</span> <span class="ss">:none</span>
</span><span class='line'>                             <span class="ss">:asset-path</span> <span class="s">&quot;out&quot;</span>
</span><span class='line'>                             <span class="ss">:output-to</span> <span class="s">&quot;resources/public/out/my_project.js&quot;</span>
</span><span class='line'>                             <span class="ss">:output-dir</span> <span class="s">&quot;resources/public/out&quot;</span>
</span><span class='line'>                             <span class="ss">:source-map-timestamp</span> <span class="nv">true</span><span class="p">}}}}</span>
</span><span class='line'>
</span><span class='line'>         <span class="ss">:figwheel</span> <span class="p">{</span><span class="ss">:css-dirs</span> <span class="p">[</span><span class="s">&quot;resources/public/css&quot;</span><span class="p">]}</span>
</span><span class='line'>
</span><span class='line'>         <span class="ss">:clean-targets</span> <span class="o">^</span><span class="p">{</span><span class="ss">:protect</span> <span class="nv">false</span><span class="p">}</span> <span class="p">[</span><span class="s">&quot;resources/public/js/compiled&quot;</span> <span class="s">&quot;target&quot;</span><span class="p">]}})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s add a new profile for integrations specs with all the extra
dependencies we need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>   <span class="ss">:integration</span> <span class="p">{</span><span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">compojure</span> <span class="s">&quot;1.3.4&quot;</span><span class="p">]</span>
</span><span class='line'>                                <span class="p">[</span><span class="nv">ring/ring-jetty-adapter</span> <span class="s">&quot;1.4.0-RC1&quot;</span><span class="p">]</span>
</span><span class='line'>                                <span class="p">[</span><span class="nv">clj-webdriver</span> <span class="s">&quot;0.6.1&quot;</span><span class="p">]</span>
</span><span class='line'>                                <span class="p">[</span><span class="nv">speclj</span> <span class="s">&quot;3.3.1&quot;</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>                 <span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">speclj</span> <span class="s">&quot;3.2.0&quot;</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>                 <span class="ss">:test-paths</span> <span class="p">[</span><span class="s">&quot;src&quot;</span> <span class="s">&quot;spec&quot;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we dissect the above, we&#8217;re adding compojure and a ring jetty
adapter so we can serve our compile app to a browser, <code>clj-webdriver</code>
will be interacting with the browser and <code>speclj</code> will be used to run
the test. Note that <code>speclj</code> could be replaced with any other testing
library.</p>

<p>We&#8217;ll put our tests in a separate <code>spec</code> folder at the root of the
project, that&#8217;s why we add it to the test paths.</p>

<h2>Setup the tests</h2>

<p>To run the integration tests, and every time we save one of the source
files, we need the following steps:</p>

<ul>
<li><p>Compile the ClojureScript app</p></li>
<li><p>Start a webserver to serve the app</p></li>
<li><p>Setup a WebDriver that can visit the app served by the webserver.</p></li>
</ul>


<p>Using <code>speclj</code>, this will mean adding a bunch of wrappers around our
actual specs.</p>

<p>Let&#8217;s start with writting a webserver that will help us serve our app
in <code>spec/my_project/spec_utils/server.clj</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">my.project.spec-utils.server</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.java.io</span> <span class="ss">:as</span> <span class="nv">io</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">compojure.core</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">routes</span> <span class="nv">GET</span> <span class="nv">defroutes</span><span class="p">]]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">compojure.route</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">resources</span><span class="p">]]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">compojure.handler</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">api</span><span class="p">]]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">ring.adapter.jetty</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">run-jetty</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defroutes</span> <span class="nv">http-handler</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">resources</span> <span class="s">&quot;/&quot;</span> <span class="ss">:root</span> <span class="s">&quot;resources/public&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">start</span> <span class="p">[</span><span class="nv">port</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run-jetty</span> <span class="nv">http-handler</span> <span class="p">{</span><span class="ss">:port</span> <span class="nv">port</span> <span class="ss">:join?</span> <span class="nv">false</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a very simple server that will server all static files from
the <code>resources/public</code> folder.</p>

<p>Next, let&#8217;s add a compiler in <code>spec/my_project/spec_utils/compiler.clj</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">my-project.spec-utils.compiler</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">cljs.build.api</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">build-cljs!</span>
</span><span class='line'>  <span class="s">&quot;Builds cljs for integration specs&quot;</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;building cljs&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cljs.build.api/build</span>
</span><span class='line'>   <span class="s">&quot;src&quot;</span>
</span><span class='line'>   <span class="p">{</span><span class="ss">:main</span> <span class="ss">&#39;my-project.core</span>
</span><span class='line'>    <span class="ss">:output-to</span> <span class="s">&quot;resources/public/integration/main.js&quot;</span>
</span><span class='line'>    <span class="ss">:output-dir</span> <span class="s">&quot;resources/public/integration&quot;</span>
</span><span class='line'>    <span class="ss">:asset-path</span> <span class="s">&quot;integration&quot;</span>
</span><span class='line'>    <span class="ss">:optimizations</span> <span class="ss">:none</span>
</span><span class='line'>    <span class="ss">:static-fns</span> <span class="nv">true</span> <span class="c1">; for phantomjs/safari</span>
</span><span class='line'>    <span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally, we&#8217;ll need the phantomjs driver (<code>spec/my_project/spec_utils/phantomjs.clj</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">my-project.spec-utils.phantomjs</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">org.openqa.selenium.phantomjs</span> <span class="nv">PhantomJSDriver</span><span class="p">]</span>
</span><span class='line'>           <span class="p">[</span><span class="nv">org.openqa.selenium.remote</span> <span class="nv">DesiredCapabilities</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">driver</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">PhantomJSDriver.</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">doto </span><span class="p">(</span><span class="nf">DesiredCapabilities.</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">.setCapability</span> <span class="s">&quot;phantomjs.cli.args&quot;</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">into-array </span><span class="nv">String</span> <span class="p">[</span><span class="s">&quot;--ignore-ssl-errors=true&quot;</span>
</span><span class='line'>                                         <span class="s">&quot;--webdriver-loglevel=warn&quot;</span><span class="p">])))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s a bit of Java incantations here to parametrize the
driver. Webdriver is using the Java version of the Selenium webdriver,
so if you want to configure this further you can look into Selenium&#8217;s
docs.</p>

<p>Finally, let&#8217;s create a single-entry utils file
<code>spec/my_project/spec_utils.clj</code> to combine all of the above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">my-project.spec-utils</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clj-webdriver.taxi</span> <span class="ss">:as</span> <span class="nv">t</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">clj-webdriver.driver</span> <span class="ss">:as</span> <span class="nv">driver</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">my-project.spec-utils.server</span> <span class="ss">:as</span> <span class="nv">server</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">my-project.spec-utils.compiler</span> <span class="ss">:as</span> <span class="nv">compiler</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">my-project.spec-utils.phantomjs</span> <span class="ss">:as</span> <span class="nv">phantomjs</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">build-cljs!</span> <span class="nv">compiler/build-cljs!</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">with-server</span>
</span><span class='line'>  <span class="s">&quot;Start a server to host the js files&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">specs</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;starting server&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">svr</span> <span class="p">(</span><span class="nf">server/start</span> <span class="mi">10555</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">try</span> <span class="p">(</span><span class="nf">specs</span><span class="p">)</span> <span class="p">(</span><span class="nf">finally</span> <span class="p">(</span><span class="nf">.stop</span> <span class="nv">svr</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">with-webdriver</span>
</span><span class='line'>  <span class="s">&quot;setup selenium webdriver&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">specs</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;starting webdriver&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">try</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">driver</span> <span class="p">(</span><span class="nf">driver/init-driver</span> <span class="p">{</span><span class="ss">:webdriver</span> <span class="p">(</span><span class="nf">phantomjs/driver</span><span class="p">)})]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">t/implicit-wait</span> <span class="nv">driver</span> <span class="mi">3000</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">t/set-driver!</span> <span class="nv">driver</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">specs</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">finally</span> <span class="p">(</span><span class="nf">t/quit</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we&#8217;re ready to write our first spec! In
<code>spec/my_project/core_spec.clj</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">my-project.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clj-webdriver.taxi</span> <span class="ss">:as</span> <span class="nv">taxi</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">my-project.spec-utils</span> <span class="ss">:as</span> <span class="nv">utils</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;the whole thing&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">before-all</span> <span class="p">(</span><span class="nf">utils/build-cljs!</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">around-all</span> <span class="p">[</span><span class="nv">specs</span><span class="p">]</span> <span class="p">(</span><span class="nf">utils/with-server</span> <span class="nv">specs</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">around-all</span> <span class="p">[</span><span class="nv">specs</span><span class="p">]</span> <span class="p">(</span><span class="nf">utils/with-webdriver</span> <span class="nv">specs</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;index page&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;works&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">taxi/to</span> <span class="s">&quot;http://localhost:10555/&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">taxi/take-screenshot</span> <span class="ss">:file</span> <span class="s">&quot;./screenshot.png&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should-contain</span> <span class="s">&quot;hello!&quot;</span> <span class="p">(</span><span class="nf">taxi/text</span> <span class="s">&quot;h2&quot;</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Result</h2>

<p>You can find an example of minimal setup here: <a href="https://github.com/Jell/cljs-autospec-example">https://github.com/Jell/cljs-autospec-example</a>.</p>

<p>This follows closely the instructions in this blogpost.</p>

<h2>Extra tips</h2>

<p>In our setup, we duplicate the compiler options several times: twice
in the <code>project.clj</code> and once in <code>compiler.clj</code>.</p>

<p>This can be tedious and error-prone if you have <code>:libs</code> or
<code>:foreign-libs</code> in your config.</p>

<p>To avoid this, you can move the common compiler options to a separate
<code>config/compiler.clj</code> file that you then read in your <code>project.clj</code>
and <code>compiler.clj</code> files.</p>

<p>Do do that in the <code>project.clj</code>, use an unquoted expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:compiler</span> <span class="o">~</span><span class="p">(</span><span class="nf">read-string</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;config/compiler.clj&quot;</span><span class="p">))}</span>
</span></code></pre></td></tr></table></div></figure>

<div class='octopress-authorbox'>
  <div class="author-pic">
    <img src="http://www.gravatar.com/avatar/c7a730fdb6c64f65ff18a5e74e60b4df" alt="Jean-Louis Giordano" />
  </div>

  <div class="author-about">
    <h3>Jean-Louis Giordano</h3>
    <ul class="author-links">
      
      <li>Grumpy Developer</li>
      

      
      <li><a href="mailto: ">jean-louis@pugglepay.com</a></li>
      

      
      <li>
        <a href="https://twitter.com/jellismymind" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @jellismymind</a>
        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
      </li>
      
    </ul>
  </div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClojureScript: from zero to production (Part 1)]]></title>
    <link href="http://devblog.pugglepay.com/blog/2015/08/12/clojurescript-from-zero-to-production-part-1/"/>
    <updated>2015-08-12T13:22:00+02:00</updated>
    <id>http://devblog.pugglepay.com/blog/2015/08/12/clojurescript-from-zero-to-production-part-1</id>
    <content type="html"><![CDATA[<p>A few weeks ago, we&#8217;ve released our first user-facing ClojureScript
app. We developed it over the course of couple of months, starting
from scratch.</p>

<p>We had previously launched a couple of non-critical Clojure apps (our
slack bot, some testing tools), most of our projects being written in
Ruby.</p>

<!-- more -->


<h2>Motivation</h2>

<p>PugglePay is a payment company, and we wanted to provide a page for
our users to see their unpaid bills and get an overview of the last
few transactions.</p>

<p>After investigating our options, we decided that we should start a new
separate project that access all relevant info from our backend via an
API, then present it to the user in a nicely structured way.</p>

<p>We&#8217;ve also decided that we did not want to have a user account and a
system of login, instead access to the page should be through one-time
links sent to the user along with each payment information.</p>

<p>We therefore realised that we could have this app as a single-page
JavaScript app. JavaScript
<a href="https://www.destroyallsoftware.com/talks/wat">sucks</a>, so we wanted
to find a better way to build client-rich apps. Therefore ClojureScript.</p>

<p>We chose ClojureScript because we knew the semantics of Clojure were
very good, and given our knowledge and experience, this was the best
fit.</p>

<h2>Our current setup</h2>

<p>Our stack consists of the following libraries:</p>

<ul>
<li><a href="https://github.com/bhauman/lein-figwheel">figwheel</a></li>
<li><a href="https://github.com/reagent-project/reagent">reagent</a> (and therefore react)</li>
<li><a href="https://github.com/Day8/re-frame">re-frame</a> (most epic README ever btw)</li>
<li><a href="https://github.com/ckirkendall/kioo">kioo</a></li>
<li><a href="http://speclj.com/">speclj</a></li>
</ul>


<p><a href="https://github.com/bhauman/lein-figwheel">Figwheel</a> is I think the
key to the success of this app. It&#8217;s trivial to setup, and you get
interactive development without any particular editor support.</p>

<p>This is very important, compared to the usual REPL-driven development
of Clojure projects. This means that beginners can get started without
having to setup anything, and focus on the code before focusing on
setting up their environment.</p>

<p>I believe the second important factor was using
<a href="https://github.com/ckirkendall/kioo">Kioo</a>. Because the templates are
made of pure HTML and are rendered using composable transformations,
developers and designers were able to work in parallel without
interfering with each other and communicating using HTML as
lingua-franca.</p>

<p>This made the development very smooth.</p>

<p>One weak point was testing setup, which ended up being a bit too much
of a hassle to setup. New tools are now surfacing that would make
things smoother in the future
(<a href="https://github.com/bhauman/devcards">devcards</a> maybe?).</p>

<h2>Lessons learned</h2>

<p>I&#8217;ll just list a few here, more to come in later posts.</p>

<h3>DOM manipulation is slow, React is awesome</h3>

<p>In the first version of our app, we used
<a href="https://github.com/ckirkendall/enfocus">enfocus</a> instead of
<a href="https://github.com/ckirkendall/kioo">kioo</a>, and did not use React at
all. This made the app much too slow when testing on the IPhone, so we
re-wrote it using react.</p>

<p>Fortunatelly, we had already structured the app around a single atom
holding all our state, so this was an easy transition.</p>

<h3>The iphone 4 javascript engine is utterly broken</h3>

<p>We tracked down an incredible bug when using hashing functions that
only happened on iphone 4 when NOT using a web inspector.  You can
read about it here:
<a href="http://dev.clojure.org/jira/browse/CLJS-1380">http://dev.clojure.org/jira/browse/CLJS-1380</a></p>

<p>TL;DR: the JIT compiler has broken inlining of bit operations on the
iPhone 4 (note: not on the iphone 4S! only specifically using the
hardware version of the iphone 4). The solution: use <code>try ... catch</code>
to disable JIT compiling for functions doing bit operations.</p>

<p>Separate blog post coming soon!</p>

<h3>re-frame is good</h3>

<p>Once you get around to it, it&#8217;s a very small library that will help
you organize the flow of your app. We started without, and all-in-all
it was not bad, except for the part where we had to deal with side
effects or query the app state in different in different ways and
places.</p>

<p>But still ended up with a structure that was very similar to re-frame,
except less good, and adhering to the re-frame conventions helped us
better structure everything with a linear flow of data.</p>

<p>Separate blog post coming soon!</p>

<h3>tracking errors is not a bad idea</h3>

<p>We use <a href="https://app.honeybadger.io/">Honeybadger</a> to track errors on
the page (that&#8217;s what we were using for our Rails app to begin
with). We were afraid it would end up being very noisy, but we
actually get only very few errors related to loading issues (and we
plan to fix those).</p>

<h3>Write integration specs in Clojure</h3>

<p>The way we write integrations tests is to have a setup phase in our
specs where we compile our app from withing Clojure using
<code>cljs.build.api/build</code>, start a compojure / jetty server that serves
the app and stubs the API the app talks to, and run the specs using
<code>clj-webdriver</code> and phantomjs.</p>

<p>Separate blog post coming soon!</p>

<h2>Conclusion</h2>

<p>We have been live for a few weeks now, and everything runs
smoothly. Everybody at the office has contributed to the project, have
a good understanding of its inner workings, and is satisfied with the
result. All in all, a pretty good experience.</p>
<div class='octopress-authorbox'>
  <div class="author-pic">
    <img src="http://www.gravatar.com/avatar/c7a730fdb6c64f65ff18a5e74e60b4df" alt="Jean-Louis Giordano" />
  </div>

  <div class="author-about">
    <h3>Jean-Louis Giordano</h3>
    <ul class="author-links">
      
      <li>Grumpy Developer</li>
      

      
      <li><a href="mailto: ">jean-louis@pugglepay.com</a></li>
      

      
      <li>
        <a href="https://twitter.com/jellismymind" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @jellismymind</a>
        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
      </li>
      
    </ul>
  </div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where is my stack? (Part 2): GPG is awesome]]></title>
    <link href="http://devblog.pugglepay.com/blog/2015/08/11/where-is-my-stack-part-2-gpg-is-awesome/"/>
    <updated>2015-08-11T13:31:00+02:00</updated>
    <id>http://devblog.pugglepay.com/blog/2015/08/11/where-is-my-stack-part-2-gpg-is-awesome</id>
    <content type="html"><![CDATA[<p>Storing and sharing secrets is tricky. At PugglePay we used to do it
by having a password encrypted file, and sharing that password with
all the devs.</p>

<p>This actually became a problem as we grew, because sharing a password
is annoying. If we need to change the password for safety reasons, we
need to communicate that to all devs.</p>

<p>The solution is of course to use GPG encryption, and it&#8217;s actually not
that difficult either.</p>

<!-- more -->


<h2>What is GPG?</h2>

<p>GPG is a GNU implementation of the OpenPGP standard, a set of tools
for encrypting and signing messages.</p>

<p>PGP encryption works by encrypting the message you want to protect
using a symetric key, then encrypting that key for each recipient of
the message using asymetric encryption.</p>

<p>The result of that is that each recipient has a set of public and
private keys. You only need their public key to encrypt a message, but
they will need their private key do decrypt it.</p>

<h2>How to create a key pair?</h2>

<p>First install a gpg package. On mac using brew, that would be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install gpg</span></code></pre></td></tr></table></div></figure>


<p>After that, use the <code>--gen-key</code> function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gpg --gen-key</span></code></pre></td></tr></table></div></figure>


<p>Follow the instructions, using whatever email you want to use as your
key ID, then export the public key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gpg --export -a [email] &gt; public.key</span></code></pre></td></tr></table></div></figure>


<p>You can now use that public key (or a list of them) to encrypt a file
using <code>gpg --encrypt</code>.</p>

<h2>How to use it to share secrets?</h2>

<p>That&#8217;s actually pretty easy: just encrypt a file containing all the
secrets using the public key of all your devs in a format that is
easily parsable in your language of choice.</p>

<p>We wrote a small library to do that in ruby: https://github.com/PugglePay/mrf</p>

<h2>How to edit a GPG file?</h2>

<p>You have several options. The easy one is to use an editor that
supports editing GPG files. If you use emacs, you&#8217;re lucky because
that&#8217;s built-in. If you use VIM, you can use a plugin.</p>

<p>Alternativelly, you can use https://gpgtools.org/, which you might
want to install anyway because that&#8217;s a good set of tools.</p>

<p>Worst case, use <code>gpg --decrypt</code>, change the secrets, then re-encrypt
using <code>gpg --encrypt</code>.</p>

<h2>Conclusion</h2>

<p>GPG is awesome, and we&#8217;ve also been using it to share one-off secrets
we want to communicate over an insecure channel (like in a slack forum
or in an email).</p>
<div class='octopress-authorbox'>
  <div class="author-pic">
    <img src="http://www.gravatar.com/avatar/c7a730fdb6c64f65ff18a5e74e60b4df" alt="Jean-Louis Giordano" />
  </div>

  <div class="author-about">
    <h3>Jean-Louis Giordano</h3>
    <ul class="author-links">
      
      <li>Grumpy Developer</li>
      

      
      <li><a href="mailto: ">jean-louis@pugglepay.com</a></li>
      

      
      <li>
        <a href="https://twitter.com/jellismymind" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @jellismymind</a>
        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
      </li>
      
    </ul>
  </div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The whys of reviewing]]></title>
    <link href="http://devblog.pugglepay.com/blog/2015/04/16/the-whys-of-reviewing/"/>
    <updated>2015-04-16T15:42:00+02:00</updated>
    <id>http://devblog.pugglepay.com/blog/2015/04/16/the-whys-of-reviewing</id>
    <content type="html"><![CDATA[<p>The other week we talked about reviews, why do we do them, what do we look at,
and what do we get out of it.</p>

<p>What we didn&#8217;t really discuss was the technical hows, these details come down to
your own style. Some people like seeing the changes in increments, in a commit
by commit view, some like to see the sum of changes in all their glory. This
might be another meeting and another blog post.</p>

<!-- more -->


<h1>The whys</h1>

<p>The answer here might seem obvious, but it&#8217;s nice to restate even the given
answers. Maybe we find out that our set of reasons is larger than we think.</p>

<h2>Being right</h2>

<p>Correctness is the obvious answer, and it&#8217;s a good one. I don&#8217;t know about you, but here at Zimpler we are all fallible humans, and a
second set of eyes is always useful.</p>

<p>This is what I like to think of as the &#8216;objective&#8217; part of the review. Either
your code does what it should do, or it doesn&#8217;t. Either your tests cover the
edge cases or they don&#8217;t.</p>

<p>The points we collected under this heading were:</p>

<ul>
<li>Does the code do what it&#8217;s supposed to?

<ul>
<li>Does it follow the specification?</li>
<li>Do the tests test the right stuff?</li>
</ul>
</li>
<li>Does the code avoid breaking the rest of the system?

<ul>
<li>Will the performance be good enough?</li>
<li>Will the implementation break any expectations present in other parts of the
code?</li>
</ul>
</li>
<li>Does the code directly contradict any planned changes?</li>
</ul>


<p>If the code does not measure up on these points, it&#8217;s pretty much going to get rejected, no
discussion.</p>

<p>I&#8217;d like to take an extra look at the final point: Planned Changes. Maybe you&#8217;ve
been locked in your office for a week working on this feature, maybe another
team is working on something you aren&#8217;t really aware of. And maybe your
implementation will make things very hard for them.
When this happened, you really have to think about who gets priority, and how to
accommodate each other. You might not be wrong, but you might still have to
change.
In the end, any change will close some doors in the future while opening others.
The thing you want to prevent here is direct conflicts with planned changes, not
theoretical future strawmen. As a reviewer you should be reasonable in your
expectations of the implementers soothsaying capabilities and aware of your own.</p>

<h2>Being read</h2>

<p>Even if your code is correct, it might not be obviously so. As I mentioned
we&#8217;re all humans here, and we do complicated work, so any help is appreciated in
understanding each others.</p>

<p>This is a much more subjective side of the process. This is where you get into
heated discussions about names, line breaks and bikeshed colors, but it&#8217;s still
important!</p>

<p>Some points we lined up under this heading:</p>

<ul>
<li>Help minimize technical debt.</li>
<li>Check readability/grokability/styling.</li>
</ul>


<p>Restating the above, even if you&#8217;re right, your code might still be bad, the
mitigating factor is that you might not be aware of it. Your reviewer is
responsible for pointing out your nasty hacks, your convoluted logical
constructs and your ugly bikesheds.</p>

<p>For these kind of things, we won&#8217;t immediately reject a story. Changes of this
kind are often relatively minor and clear, so bouncing them back and forth often
solves it in less time than restarting the story.</p>

<p>Quite often you even get to prove your reviewer wrong, which is always a nice
feeling.</p>

<h2>Becoming enlightened</h2>

<p>So what do we get out of all this?</p>

<h3>Primary results</h3>

<p>From the first part of the review, we get a working system, reasonable
performance and a clear way forward.
The code does its job without getting in the way of everyone else.</p>

<p>In the second part we make sure to pave the way for more general future
improvements. By reducing quirks, complications and unexpected behavior we make
it easier to get things done for future us.</p>

<h3>Gazing into the abyss</h3>

<p>Apart from the reviews positive effects on the code, the review also improves
the reviewer, as well as the reviewee!</p>

<p>Reading code is extremely important, it gives you both a better understanding of
the code base you have, just from looking at parts your not currently working
with. It also works as a puzzle, where you have to understand a different
persons style of writing code.</p>

<h3>Talking to your friends</h3>

<p>While reading code is important, discussing code is vital. By critiquing and
analyzing the code of your fellow programmers, you invite discussion on both
design choices and styling.</p>

<p>Discussion almost always leads to learning and that&#8217;s our final fringe benefit
in the review process.</p>

<h2>Reviewing should be fun</h2>

<p>Reviewing improves your company in multiple ways beyond just the code. So make
sure you do it well, be clear and honest in your review comments, and try to
learn as much as you can as you go along.</p>

<p>I&#8217;m planning to schedule another meeting to follow this up, on how to review
code, and to how to help others review yours. After that I hope to do another
blog post.</p>
<div class='octopress-authorbox'>
  <div class="author-pic">
    <img src="http://www.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e" alt="Gustaf" />
  </div>

  <div class="author-about">
    <h3>Gustaf</h3>
    <ul class="author-links">
      
      <li>Developer Oakenshield</li>
      

      
      <li><a href="mailto: "></a></li>
      

      
    </ul>
  </div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where is my stack? (Part 1): Goodbye Torquebox]]></title>
    <link href="http://devblog.pugglepay.com/blog/2013/10/09/where-is-my-stack-part-1-torquebox/"/>
    <updated>2013-10-09T13:30:00+02:00</updated>
    <id>http://devblog.pugglepay.com/blog/2013/10/09/where-is-my-stack-part-1-torquebox</id>
    <content type="html"><![CDATA[<p>So this is how it ends.</p>

<p>This week was the last week we ran TorqueBox in production. We&#8217;ve had
it running in production for 5 months. That&#8217;s something! We
switched to TorqueBox in the first place to avoid headache with system
administration. Sadly, There Ain&#8217;t No Such Thing As A Free Lunch
(TANSTAAFL), and we traded our problems with new ones, namely JRuby
and the JVM.</p>

<!-- more -->


<h2>Previously on &#8220;PugglePay&#8221;</h2>

<p>In an <a href="http://devblog.pugglepay.com/blog/2013/05/03/torquebox-or-how-i-learned-to-stop-worrying-and-love-the-jvm/">earlier post</a>, I discussed some problem we had with TorqueBox from the very
beginning, but that we thought could overcome:</p>

<ul>
<li>slower tests</li>
<li>memory leaks</li>
<li>no zero-downtime deploy</li>
</ul>


<p>The only problem that was solved (and only recently) was the zero
downtime deploy. Other problems have appeared in the meantime:</p>

<ul>
<li>gem incompatibility</li>
<li>shaky OpenSSL support</li>
<li>very tricky setup with Spork</li>
<li>assets pre-compile that take forever</li>
</ul>


<h2>What to do?</h2>

<p>Most of those problems are related to JRuby, and I&#8217;m confident that
they will be solved someday. Another thing to point out is that we
migrated a fairly large application, so it might be easier to spot
memory leaks when building an app from the ground up.</p>

<p>But for our case, we reached the conclusion that TorqueBox was not a
good fit given our current needs, and went therefore the other way.</p>

<p>And that meant the Unix way.</p>

<p>Instead of adding the one big component, we&#8217;ve had to add a bunch of
smaller ones. We are now using Nginx+Passenger Enterprise as web-server,
Redis+Resque+resque_scheduler for cluster-wise scheduling, and Monit for
keeping all those services running.</p>

<p>So we did not want to become full-blown sysadmin, but that became the
only viable option for us.</p>

<p>We were only treating the symptom though, and not the decease: we did
not want to become Sysadmins because the tooling we&#8217;ve been using for
system administration were so painful to use.</p>

<p>So that&#8217;s how it all began: with looking for a replacement for our
own mixture of ruby scripts and Chef recipes&#8230;</p>

<h2>On the next episode of PugglePay Development</h2>

<p>The team learns new encryption techniques (&#8220;We should totally use
GPG!&#8221;), discover new tools (&#8220;Ansible all the things!&#8221;) and write some
libraries (&#8220;Mr. F~~&#8221;).</p>
<div class='octopress-authorbox'>
  <div class="author-pic">
    <img src="http://www.gravatar.com/avatar/c7a730fdb6c64f65ff18a5e74e60b4df" alt="Jean-Louis Giordano" />
  </div>

  <div class="author-about">
    <h3>Jean-Louis Giordano</h3>
    <ul class="author-links">
      
      <li>Grumpy Developer</li>
      

      
      <li><a href="mailto: ">jean-louis@pugglepay.com</a></li>
      

      
      <li>
        <a href="https://twitter.com/jellismymind" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @jellismymind</a>
        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
      </li>
      
    </ul>
  </div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair Programming in the Cloud]]></title>
    <link href="http://devblog.pugglepay.com/blog/2013/05/28/pair-programming-in-the-cloud/"/>
    <updated>2013-05-28T21:53:00+02:00</updated>
    <id>http://devblog.pugglepay.com/blog/2013/05/28/pair-programming-in-the-cloud</id>
    <content type="html"><![CDATA[<p>At PugglePay, we like to program in pairs. When everyone is working in
the same office, that&#8217;s pretty easy: we just share a computer, and use
whatever text editor the owner of the computer has (in our case
Emacs, Vim or Sublime Text 2).</p>

<p>But things get complicated when one of the developper decides to move
abroad for a couple of months&#8230;</p>

<!-- more -->


<h2>First attempt: No Pair Programming</h2>

<p>Well, the easiest solution is simply to stop pair programming and
simply review each other&#8217;s code. But we observed that it&#8217;s really more
difficult to solve problems in a simple and elegant way while
programming on your own. One is also more reluctant to fix broken
windows on code that is already written.</p>

<p>So I guess that&#8217;s not a viable solution. Pair programming is great,
and passing on it simply because we are not in the same place is just
too sad.</p>

<h3>Pros:</h3>

<ul>
<li>Trivial to setup</li>
</ul>


<h3>Cons:</h3>

<ul>
<li>Makes me a sad panda</li>
</ul>


<h2>Second attempt: Screen Sharing</h2>

<p>The simple approach is to simply run some sort of screen
sharing application. We have been using
<a href="http://screenhero.com/">Screen Hero</a>, which is really awesome. Each
user that joins a Screen Hero session gets his own cursor with his
name on it. In addition to that, we run google hangouts or Skype to
talk to each other.</p>

<p>This works great, except that there is some lag for the users that are
not hosting the session, and the quality of the video is not perfect.
Spending most of the day writting code with an image full of
compression artifact, even minors, is pretty painfull.</p>

<p>Also, since we recently migrated to JRuby, some of us still use a
not so powerful MacBook Air, running Skype + Screen Hero + Spork +
Nailgun + Chrome made our computers really, REALLY slow.</p>

<p>So that didn&#8217;t work for us, but if you have access to a really good
internet connection and powerfull computers, this might be the best
solution.</p>

<h3>Pros:</h3>

<ul>
<li>Easy to setup</li>
<li>Fancy cursors for everyone</li>
</ul>


<h3>Cons:</h3>

<ul>
<li>Slow</li>
<li>Compression artifacts</li>
</ul>


<h2>Third attempt: AWS + SSH + tmux + Emacs</h2>

<p>Inspired by other remote-working companies like
<a href="http://thinkrelevance.com/">Relevance</a>, we decided to try a
combination of SSH, tmux and Emacs. To make things easier, we decided
to setup all that on a High CPU Amazon EC2 instance.</p>

<p>To share sessions with <a href="http://tmux.sourceforge.net/">tmux</a>, we use
<a href="https://github.com/zolrath/wemux">wemux</a>, which is a small wrapper
around tmux to simplify multi-user sessions.</p>

<p>I order to work with git, we simply need to active Agent Forwarding
when we ssh in to the instance. It&#8217;s also interesting to setup some
port forwarding when we want to run <code>rails server</code>.</p>

<p>To do that automatically, we just configured a host in our local
<code>~/.ssh/config</code> that look something like that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ServerAliveInterval 60
</span><span class='line'>
</span><span class='line'>Host pp
</span><span class='line'>  HostName pair-programming.pugglepay.net.
</span><span class='line'>  User pair
</span><span class='line'>  ForwardAgent yes
</span><span class='line'>  LocalForward 3000 127.0.0.1:3000
</span></code></pre></td></tr></table></div></figure>


<p>And then we just have to <code>ssh pp</code> to access the instance.</p>

<p>We met some problem when running Emacs from the terminal, since the
meta key (the <code>cmd</code> button on mac) is not properly interpreted. Also,
<code>C-&lt;left&gt;</code> and <code>C-&lt;right&gt;</code> were not properly recognized.</p>

<p><a href="http://www.iterm2.com/#/section/home">iTerm 2</a> solved the first
problem. In the preference panel, under Profiles/Keys, select &#8220;Left
otion key acts as +Esc&#8221;. Now we can use the <code>alt</code> key as the meta key.</p>

<p>We solved the second problem within emacs, by mapping the ASCII escape
sequence received from <code>C-&lt;direction&gt;</code> to <code>C-&lt;direction&gt;</code>. That&#8217;s what
we added to our <code>~/.emacs/init.el</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(global-set-key (kbd "M-[ c") (kbd "C-&lt;right&gt;"))
</span><span class='line'>(global-set-key (kbd "M-[ d") (kbd "C-&lt;left&gt;"))
</span><span class='line'>(global-set-key (kbd "M-[ a") (kbd "C-&lt;up&gt;"))
</span><span class='line'>(global-set-key (kbd "M-[ b") (kbd "C-&lt;down&gt;"))</span></code></pre></td></tr></table></div></figure>


<p>This solution is pretty nice, but it restricts us to Emacs, vim, or
editors that can be run in a terminal. It also requires a lot of
effort to setup. We also get the super annoying scrolling with tmux
( <code>C-b [</code>, is there a better way?).</p>

<p>It might have been easier to setup tmux with vim instead, but we have
a much more efficient workflow with emacs at the moment.</p>

<p>Though a nice side-effect of developping on the exact same type of
instance that we deploy our application to is that we find bugs that
we might have missed while developping on our local machines. We found
a bunch of timezone-related bugs for instance.</p>

<p>The plus side is that once everything is in place, it&#8217;s really
comfortable to program. We share the same cursor, the same window,
there is not compression artifacts, and all is super fast.</p>

<p>This is clearly the best solution we have found so far. Plus it&#8217;s a
really geeky one, and we get to learn tmux along the way.</p>

<h3>Pros:</h3>

<ul>
<li>Fast</li>
<li>Convinient</li>
<li>Geeky</li>
</ul>


<h3>Cons:</h3>

<ul>
<li>A lot of configuration</li>
<li>No support for sublime text 2</li>
<li>Weird scrolling with tmux</li>
</ul>


<h2>Conclusion</h2>

<p>We&#8217;re still kind of green in the field of remote pair programming, but
we found a pretty good solution for now. There is clearly room for
improvement, but remote pair programming feels pretty much like local
pair programming (even arguably better).</p>
<div class='octopress-authorbox'>
  <div class="author-pic">
    <img src="http://www.gravatar.com/avatar/c7a730fdb6c64f65ff18a5e74e60b4df" alt="Jean-Louis Giordano" />
  </div>

  <div class="author-about">
    <h3>Jean-Louis Giordano</h3>
    <ul class="author-links">
      
      <li>Grumpy Developer</li>
      

      
      <li><a href="mailto: ">jean-louis@pugglepay.com</a></li>
      

      
      <li>
        <a href="https://twitter.com/jellismymind" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @jellismymind</a>
        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
      </li>
      
    </ul>
  </div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Torquebox or: How I Learned to Stop Worrying and Love the JVM]]></title>
    <link href="http://devblog.pugglepay.com/blog/2013/05/03/torquebox-or-how-i-learned-to-stop-worrying-and-love-the-jvm/"/>
    <updated>2013-05-03T10:42:00+02:00</updated>
    <id>http://devblog.pugglepay.com/blog/2013/05/03/torquebox-or-how-i-learned-to-stop-worrying-and-love-the-jvm</id>
    <content type="html"><![CDATA[<p>So here is the thing. As a DevOp, SysAdmin is a PITA. Time spent
tweaking the servers to add such or such service is time not spent
actually producing value.</p>

<p>At PugglePay, we try to be agile and always look at the trade-offs
that are involved in every decision we make. So as we started
developing our product, we decided to go with the easy and fast track,
and that meant Amazon, Rails and MySQL.</p>

<p>Unfortunately, easy does not necessary mean simple, so we kept using
the same tools to the point where easy became complex. It was time
for us to do something difficult which was to use more tools and turn our
architecture simple again.</p>

<!-- more -->


<p>The difficult thing for us was to move out of our comfort zone because
our comfort zone was a dangerous place (remember the frog being slowly
boiled to death).</p>

<h2>Our problem:</h2>

<ul>
<li><p>We needed queues. We kept on postponing using them because we wanted
to Keep It Simple™, but simple meant using queues.</p></li>
<li><p>We needed daemons. Stuff that run non stop, and that get updated
after each deploy.</p></li>
<li><p>We needed scheduled jobs. We used cron for that, but that meant
the application and the server were tightly coupled. Not simple!
(but easy)</p></li>
</ul>


<p>If we look at all of the above, the easy solution would have been to
add a message processing lib like sidekiq, a short capistrano script
to redeploy our services and keep on using cron for recurring tasks.
But here comes the trick:</p>

<ul>
<li>We are going to need clustering. And we want all of the above to be
clustered.</li>
</ul>


<p>So as any good developer, we googled &#8220;rails queues cron clustering&#8221;
and found <a href="http://torquebox.org/">TorqueBox</a>.</p>

<h2>TorqueBox</h2>

<p>The idea of TorqueBox is to add a layer of abstraction between the
server and your application. It&#8217;s like you are building a city, and
TorqueBox offers to provide the sewer system, running water,
electricity and the Internet so that you can focus on the city
planning.</p>

<p>In practice, that meant webserver, messaging, recurring jobs, and
daemons out of the box, and the only SysAdmin we have to take care of
is to get TorqueBox running.</p>

<p>Wow. That looked exactly like what we needed. Only downside: it runs on
JRuby. Which means JVM. And we had zero knowledge.</p>

<p>But the concept was just too good to be so easily dismissed because of our
own lack of knowledge. It would be difficult for us, but it could
become easy on the long run.</p>

<h2>Investigation</h2>

<p>So we started our investigation. The first step was to migrate our app
to JRuby. First downside: we got really slow tests. So that&#8217;s the
first thing we had to improve.</p>

<p>The solution was to use <a href="https://github.com/sporkrb/spork">Spork</a> and
NailGun. What we got are fast enough tests. It&#8217;s slower than with MRI
(10% slower on average), but good enough.</p>

<p>So running on JRuby: check! Next step was to get the app running
locally on TorqueBox. Roughly, that meant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gem install torquebox
</span><span class='line'>torquebox run
</span><span class='line'>torquebox deploy
</span></code></pre></td></tr></table></div></figure>


<p>Boom. Trivial. Now let&#8217;s deploy to Amazon. Well, there&#8217;s a
<a href="https://github.com/torquebox/chef-cookbooks">chef recipe</a>. It
requires some extra work to get clustering going because Amazon does
not support multicasting (for automatic discovery of new nodes). Well,
clustering is for later, and for sure we&#8217;re going to solve that
problem. So getting TorqueBox to run on Amazon: check!</p>

<p>Now let&#8217;s deploy. Cool, there&#8217;s a
<a href="https://rubygems.org/gems/torquebox-capistrano-support">Capistrano recipe</a>!
We already used capistrano, so that was easy. Boom! Deploying to
TorqueBox: check!</p>

<p>Sweet! Now lets deploy again! Yay, it works! And again! Yay! And
again! Oups&#8230; Nothing works anymore. Well, we knew exactly nothing
about JRuby, the JVM or TorqueBox, so it took us a week to find out
that after a redeploy the connections to the database were only closed
after Garbage Collection, but garbage collection came too late in our
case.</p>

<p>So the solution was to add an <code>at_exit</code> hook that took care of closing
all connections after redeploy.</p>

<p>We also realized that we do not get zero-downtime deploy when
deploying to TorqueBox. That&#8217;s sad, because we are going to need it in
the future. After googling a little more, we found out that this is a
feature coming with the next release. Fair enough.</p>

<p>So after a couple of weeks of research and testing, we were confident
enough that TorqueBox would make our system much easier to maintain in
the future, and decided that the pros were bigger than the cons.</p>

<p>So we took a leap of faith and deployed the whole thing in production.</p>

<h2>Running in production</h2>

<p>It went pretty smoothly at first, but after a couple of deploy we got
a &#8220;PermGen out of memory&#8221; error. WTF is that?</p>

<p>Well, that&#8217;s a story for another post. Long story short, closing the
DB connections was not enough because some references were being kept
that prevented the JRuby runtimes from being garbage collected after
each deploy. Also <code>jvisualvm</code> is an awesome tool that lets you inspect
a running JVM in realtime.</p>

<p>We have been running TorqueBox in production for a couple of weeks now,
and we are getting more familiar with it everyday. Our architecture is
much simpler, and the difficult bump we had to overcome is behind us.
So in the end, we believe that we have made the right choice.</p>

<p>But I think it is important to know that this was not a totally
painless migration. We had to learn about the JVM, how its garbage
collection works, which tool to use and which flags to set, while
making sure our development speed was not too much impacted by the
change. For us, it was worth it because we needed a better
infrastructure, and we did not want to rely on too many components.</p>

<h2>Conclusion</h2>

<p>Pros > Cons, lots of new things to learn, but the end
result is a simpler architecture.</p>

<p>We&#8217;d love to share more of what we know, but we&#8217;d love even more to
acquire knowledge from others. So if you have some experience with
TorqueBox, please get in touch!</p>
<div class='octopress-authorbox'>
  <div class="author-pic">
    <img src="http://www.gravatar.com/avatar/c7a730fdb6c64f65ff18a5e74e60b4df" alt="Jean-Louis Giordano" />
  </div>

  <div class="author-about">
    <h3>Jean-Louis Giordano</h3>
    <ul class="author-links">
      
      <li>Grumpy Developer</li>
      

      
      <li><a href="mailto: ">jean-louis@pugglepay.com</a></li>
      

      
      <li>
        <a href="https://twitter.com/jellismymind" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @jellismymind</a>
        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
      </li>
      
    </ul>
  </div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spork_and_nailgun.el]]></title>
    <link href="http://devblog.pugglepay.com/blog/2013/05/02/spork-and-nailgun-dot-el/"/>
    <updated>2013-05-02T23:31:00+02:00</updated>
    <id>http://devblog.pugglepay.com/blog/2013/05/02/spork-and-nailgun-dot-el</id>
    <content type="html"><![CDATA[<p>We recently made the shift to TorqueBox here at PugglePay, and that
meant moving from MRI to JRuby. I order to cope with the slow start-up
induced by the JVM we started using spork and nailgun for running our
tests.</p>

<p><a href="https://github.com/sporkrb/spork">Spork</a> preloads instances of your
application for you to have faster startup for your tests. And nailgun
(wich comes with JRuby) is a lower level tool to have jvm instances
ready to go.</p>

<p>Both of them stay alive between test runs and can get &#8220;corrupted&#8221;. You
also need to restart spork every time you change something that is
outside what it reloads between each test (blueprints for example in
our case).</p>

<p>So we (eq me and Jean-Louis) decided to spend an hour to make this a
bit easier. With the answer to all technical problems!</p>

<!-- more -->


<h3><a href="https://github.com/PugglePay/spork-and-nailgun.el">An Emacs Plugin</a></h3>

<p>So install it (with <a href="https://github.com/dimitri/el-get">el-get</a> perhaps) and bind a key (ex <code>C-c C-l</code>) to &#8216;sang-start-all and run it.</p>

<ul>
<li>It will kill any running instances of spork and nailgun you have
running (by looking up the port they are listening to),</li>
<li>Jump to the root of the project your currently editing in and
activate the right rvm env,</li>
<li>Start upp Spork and nailgun in separate buffers.</li>
</ul>


<p>The spork buffer will popup and it can have some useful information if
you have some errors.</p>

<p><a href="http://imgur.com/RozzIIv"><img src="http://i.imgur.com/RozzIIv.png" title="Hosted by imgur.com"/></a></p>

<p>Now your ready to run your tests with <a href="https://github.com/pezra/rspec-mode"><code>C-c , v</code></a></p>

<p>This plugin works well for our workflow so <a href="https://github.com/PugglePay/spork-and-nailgun.el">try it out</a> yourself.</p>
<div class='octopress-authorbox'>
  <div class="author-pic">
    <img src="https://secure.gravatar.com/avatar/d7e5aaa6813cde9cbd0005a2cf2b56f1?d=https://d3levm2kxut31z.cloudfront.net/assets/blank-mugshot-112e2e92d74b7344b8be3630bbccc5da.png" alt="Patrik Kårlin" />
  </div>

  <div class="author-about">
    <h3>Patrik Kårlin</h3>
    <ul class="author-links">
      
      <li>System Developer</li>
      

      
      <li><a href="mailto: ">patrik@pugglepay.com</a></li>
      

      
      <li>
        <a href="https://twitter.com/patrik_karlin" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @patrik_karlin</a>
        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
      </li>
      
    </ul>
  </div>
</div>
]]></content>
  </entry>
  
</feed>
